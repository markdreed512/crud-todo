{"version":3,"sources":["components/Title.js","components/Form.js","components/EditModal.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Div","styled","div","Title","Input","input","Button","button","Form","props","action","onSubmit","handleSubmit","type","placeholder","Modal","Text","p","EditModal","useState","hidden","submit","onChange","handleChange","value","modalVal","Table","table","Checkbox","Td","td","EditButton","TodoList","initialRender","setInitialRender","modalValue","useEffect","console","log","todos","map","todo","i","style","padding","key","id","handleCheck","checked","onClick","handleEditClick","deleteItem","App","JSON","parse","localStorage","getItem","setTodos","setModalValue","currEditId","setCurrEditId","setItem","stringify","modalHidden","setModalHidden","e","date","Date","preventDefault","newTodo","target","children","getTime","concat","persist","toodoo","parseInt","newArr","reduce","acc","el","toString","newTodos","forEach","filter","obj","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7fd95d14.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nconst Div = styled.div`\n    font-family: 'Hind', sans-serif;\n    font-size: 50px;\n`\nexport default function Title() {\n    return (\n        <div>\n            <Div>CRUDdy Todo List</Div>\n        </div>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nconst Input = styled.input`\n    font-size: 30px;\n    padding: 5px;\n`\nconst Button = styled.button`\n    font-size: 30px;\n    padding: 5px;\n`\nexport default function Form(props) {\n    return (\n        <div>\n            <form action=\"submit\" onSubmit = {props.handleSubmit}>\n                <Input type=\"text\" placeholder = \"enter item\"/>\n                <Button type=\"submit\">ADD</Button>\n            </form>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nconst Modal = styled.div`\n    position: absolute;\n    background-color: rgba(0,0,0, .9);\n    padding: 20px 20px 30px 20px;\n    left: 32%;\n    top: 20%;\n`\nconst Text = styled.p`\n    color: teal;\n    font-family: arial;\n    font-size: 35px;\n    margin-top: 0;\n`\nconst Input = styled.input`\n    font-size: 30px;\n`\nconst Button = styled.button`\nfont-size: 30px;\n`\nfunction EditModal(props) {\n    // const [value, setValue] = useState(props.modalVal);\n    const[hidden, setHidden] = useState(true)\n    // const[initialRender, setInitialRender] = useState(true)\n    // useEffect(()=>{\n    //     setInitialRender(false)\n    // },[])\n    // useEffect(() => {\n    //     setValue(props.modalVal)//<-why doesn't this update input value?\n    //     console.log(props.modalVal)\n    // }, [props.modalVal]);\n    // useEffect(()=>{\n    //     console.log(value)\n    //     if(!initialRender){\n    //         setHidden(false)\n    //     }\n    // },[value])\n    return (\n        <Modal hidden={props.hidden} >\n            <Text>Edit Item</Text>\n            <form action=\"submit\" onSubmit={props.submit}>\n                <Input onChange={props.handleChange} value={props.modalVal} />\n                <Button>OK</Button>\n            </form>\n        </Modal>\n    )\n}\n\nexport default EditModal\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport EditModal from './EditModal'\nconst Table = styled.table`\n    margin: 20px;\n    display: inline-block;\n    `\nconst Checkbox = styled.input`\nwidth: 40px;\nheight: 40px;\nmargin: 0 5px;\n`\nconst Td = styled.td`\n    background-color: rgba(0,100,100,.5);\n    color: white;\n    font-size: 20px;\n    min-width: 100px;\n    max-width: 300px;\n    width: 300px;\n    // padding: 5px;\n    font-family: 'Hind', sans-serif;\n    margin: 0;\n`\nconst Button = styled.button`\n    font-size: 20px;\n    background-color: pink;\n    border: none;\n    padding-top: 5px ;\n    margin-left: 10px;\n    font-family: 'Hind', sans-serif;\n    width: 70px;\n`\nconst EditButton = styled.button`\n    font-size: 20px;\n    background-color: tan;\n    border: none;\n    padding-top: 5px ;\n    margin-left: 10px;\n    font-family: 'Hind', sans-serif;\n `\nexport default function TodoList(props) {\n    const [initialRender, setInitialRender] = useState(true)\n    // const [modalHidden, setModalHidden] = useState(true)\n    // const [modalId, setModalId] = useState(null)\n    const [modalValue, setModalValue] = useState(\"none!\")\n    useEffect(() => {\n        console.log(modalValue)\n        if (initialRender) {\n            setInitialRender(false)\n            \n        }\n    }, [modalValue])\n    // const handleEditBtnPressed = (e) => {\n    //     let todo = props.todos.filter(obj => {\n    //         return obj.id === parseInt(e.target.id)\n    //     })\n    //     setModalValue(todo[0].value)\n    //     //setModalValue doesn't work (yet?)\n    //     // console.log(modalValue)\n    //     // setModalId(parseInt(e.target.id))\n\n\n    // }\n    const getTodoValue = () => {\n        return (\"test....\")\n    }\n    return (\n        <>\n            <EditModal handleChange={props.handleChange} hidden = {props.hidden} submit={props.submit}  modalVal={props.modalValue} />\n            <Table>\n                {props.todos.map((todo, i) => {\n                    return (\n                        <tbody style={{ padding: \"0\" }} key={i}>\n                            <tr key={i}>\n                                <td>\n                                    <Checkbox type=\"checkbox\" id={todo.id} onChange={props.handleCheck}\n                                        //conditionally add or delete checked attribute on checkbox\n                                        checked={todo.checked}\n                                    /></td>\n                                <Td key={i}>{todo.value}</Td>\n                                <td>\n                                    <EditButton onClick={props.handleEditClick} id={todo.id}>Edit</EditButton>\n                                </td>\n                                <td>\n                                    <Button onClick={props.deleteItem} id={todo.id}>X</Button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    )\n                })}\n            </Table>\n        </>\n    )\n}\n\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Title from './components/Title'\nimport Form from './components/Form'\nimport TodoList from './components/TodoList'\nfunction App() {\n  //  localStorage.removeItem(\"todos\")\n  const [todos, setTodos] = useState(JSON.parse(localStorage.getItem(\"todos\")) || [])\n  const [modalValue, setModalValue] = useState(\"none...\")\n  const [currEditId, setCurrEditId] = useState(null)\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos))\n  })\n  const [modalHidden, setModalHidden] = useState(true)\n  // const [modalId, setModalId] = useState(null)\n  const handleSubmit = (e) => {\n    let date = new Date()\n    e.preventDefault()\n    let newTodo = {\n      value: e.target.children[0].value,\n      id: date.getTime(),\n      checked: false\n    }\n    setTodos(todos.concat(newTodo))\n\n    e.target.children[0].value = \"\"\n  }\n  const deleteItem = (e) => {\n    let tdArr = todos\n    let newArr = tdArr.reduce((acc, el) => {\n      return el.id.toString() === e.target.id.toString() ? acc : acc.concat(el)\n    }, [])\n    setTodos(newArr)\n  }\n  const handleCheck = (e) => {\n    e.persist()\n    //e.target is the checkbox\n    setTodos(todos.map(toodoo => {\n      if (toodoo.id === parseInt(e.target.id)) {\n        console.log(\"matched\")\n        if (toodoo.checked === false) {\n          toodoo.checked = true\n          console.log(\"here\")\n        } else {\n          toodoo.checked = false\n          console.log(\"there\")\n        }\n\n      }\n      return toodoo\n    }))\n  }\n \n  // const submit = (e) => {\n  //   e.preventDefault()\n  //   //use modalId to find todo\n  //   //set value to e.target...\n  //   let newTodos = todos.map(todoObj => {\n  //     if (todoObj.id === modalId) {\n  //       todoObj.value = e.target.children[0].value\n  //     }\n  //     return todoObj\n  //   })\n  //   setTodos(newTodos)\n  //   setModalHidden(true)\n  // }\n  const handleChange = (e) => {\n    //needs to change modalValue state\n    console.log(\"handling Change...\")\n    console.log(e.target.value)\n    setModalValue(e.target.value)\n    //copy state \n    let newTodos = todos\n    //match todo\n    newTodos.forEach(todo => {\n      if(todo.id === currEditId){\n        //mutate matched todo\n        todo.value = e.target.value\n      }\n    })\n    \n    //update state\n    setTodos(newTodos)\n    \n  }\n  const handleEditClick = (e) => {\n         let todo = todos.filter(obj => {\n            return obj.id === parseInt(e.target.id)\n        })\n        setModalValue(todo[0].value)\n        setModalHidden(!modalHidden)\n        console.log(typeof e.target.id)\n        setCurrEditId(parseInt(e.target.id))\n  }\n  return (\n    <>\n\n      <Title />\n      <Form handleSubmit={handleSubmit} />\n      <TodoList\n        todos={todos}\n        handleCheck={handleCheck}\n        deleteItem={deleteItem}\n        // handleEdit={handleEdit}\n        modalValue={modalValue}\n        hidden={modalHidden}\n        // submit={submit}\n        handleChange={handleChange}\n        handleEditClick = {handleEditClick}\n      />\n\n\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}