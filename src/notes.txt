*******************
Problem: on edit button click, modalValue state is "set", then
modal is set to visible. It should render with updated modalValue state, but instead uses default state.

research yeilds: setState doesn't immediately set state, but puts it in a queue. 

How to update component when state is updated?
It should do this automatically, right?
Maybe because it's already visible it keeps previous value 
try useEffect to make it visible only after state updates?
-result:
automatically making modal visible due to useEffect triggering on initial render
 fixed that by using a boolean to simulate didMount (to determine if it was the initial render or subsequent updates to modalValue), but even though the modalValue is updating and the modal now renders on edit button click, it still has default value in it. 

 Try moving all state logic to modal component instead of parent
 https://stackoverflow.com/questions/38892672/react-why-child-component-doesnt-update-when-prop-changes

********************
Problem: 
When toggling checkbox:
index.js:1 Warning: This synthetic event is reused for performance reasons. If you're seeing this, you're accessing the property `target` on a released/nullified synthetic event. This is set to null. If you must keep the original synthetic event around, use event.persist(). (this worked)
then...
 Cannot read property 'id' of null

 Still can't toggle back and forth from true to false on the checkboxes except for the first one you toggle after refresh browser

 Fixed: I originally had an arrow function that returned a mapped newState obj passed into setTodos. removed arrow function. It works. Why??

********************
on submit, adds new todo obj to state array
then adds state to local storage (supposedly -- it doesn't)
on refresh it doesn't load the most recent todo (because it didn't add it to locSt)

tried: 
-console.log state after setting it  res: expected (updated state)
-I suspect it doesn't run the set local storage immediately and    I'll need to use useEffect hook -- look into it.
-useEffect added right after setState in handleSubmit function.
error:  Line 20:5:  React Hook "useEffect" is called in function "handleSubmit" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks
-I'll try to move it outside the function (still inside app.js fc)
Solution: 
-move it outside the function
-useEffect just hangs out waiting for something to happen (what is it waiting for? -- answer: any life cycle event)